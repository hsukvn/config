#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys, os, string, subprocess, getopt
import urllib, pycurl
from StringIO import StringIO
import json
import getpass
from operator import itemgetter, attrgetter


CONTACT_LIST = os.getenv("HOME") + '/.contact'

class bcolors:
	GREEN = '\033[32m'
	YELLOW = '\033[93m'
	BLUE = '\033[94m'
	ENDC = '\033[0m'

def usage():
	print """Synology Contact List.
Usage: [-h|-u|-a] [--help|--update|--alias] keyword

Examples:
    tel -u          # Update for contact list
    tel rony        # Find someone who named rony
	tel -a          # List all email alias
    tel -a sit      # List email alias sit
"""

def login(curl):
	sys.stdout.write("Pleae enter your username: ")
	username = sys.stdin.readline().strip()
	password = getpass.getpass('Please enter your password: ')

	pf = {}
	pf['login-id'] = username
	pf['login-pw'] = password
	pf['action'] = 'login'
	pf['id'] = username
	pf['pw'] = password

	fields = urllib.urlencode(pf)
	page = StringIO()

	curl.setopt(pycurl.FOLLOWLOCATION , True)
	curl.setopt(pycurl.COOKIEFILE , '')
	curl.setopt(pycurl.COOKIEJAR , '')
	curl.setopt(pycurl.POST, True)
	curl.setopt(pycurl.POSTFIELDS, fields)
	curl.setopt(pycurl.WRITEFUNCTION, page.write)
	curl.setopt(pycurl.SSL_VERIFYPEER, 0)
#	curl.setopt(pycurl.URL, "https://synois.synology.com/lib/authcgi.php")
	curl.setopt(pycurl.URL, "https://synois.synology.com/index/auth.php")
	curl.perform()

	success_msg = '{"msg":"","success":true,"url":"index.php"}'
	ret_msg = page.getvalue().replace('\xef\xbb\xbf', '')

	if (ret_msg != success_msg):
		print "Login fail. ", page.getvalue()
		sys.exit(1)
	page.close()

def get_contact_list():
	import codecs

	curl = pycurl.Curl()
	login(curl)

	print "Generate contact list to", CONTACT_LIST, "..."
	get_url='https://synois.synology.com/app/Extension/scripts/list.php'
	get_action='action=enum'

	page = StringIO()
	curl.setopt(pycurl.URL, get_url)
	curl.setopt(pycurl.POSTFIELDS, get_action)
	curl.setopt(pycurl.WRITEFUNCTION, page.write)
	curl.perform()

	ext_data = page.getvalue()
	page.close()
	#ext_data = ext_data.replace('data:', '"data":')
	#ext_data = ext_data.replace('empNo:', '\n"empNo":')
	#ext_data = ext_data.replace('id:', '"id":')
	#ext_data = ext_data.replace('nameTw:', '"nameTw":')
	#ext_data = ext_data.replace('nameEn:', '"nameEn":')
	#ext_data = ext_data.replace('department:', '"department":')
	#ext_data = ext_data.replace('title:', '"title":')
	#ext_data = ext_data.replace('ext:', '"ext":')
	#ext_data = ext_data.replace('success:', '"success":')
	#ext_data = ext_data.replace('total:', '"total":')
	#ext_data = ext_data.replace('account:', '"account":')
	#ext_data = ext_data.replace('empNo:', '"empNo":')
	#ext_data = ext_data.replace('leave_status:', '"leave_status":')
	#ext_data = ext_data.replace("'", '"')
        ext_data = ext_data.replace(codecs.BOM_UTF8, '')

	get_url='https://synois.synology.com/app/Extension/scripts/alias.php'
	get_action='action=enum'

	page = StringIO()
	curl.setopt(pycurl.URL, get_url)
	curl.setopt(pycurl.POSTFIELDS, get_action)
	curl.setopt(pycurl.WRITEFUNCTION, page.write)
	curl.perform()

	alias_data = page.getvalue()
	alias_data = alias_data.replace('data:', '"data":')
	alias_data = alias_data.replace('id:', '"id":')
	alias_data = alias_data.replace('alias:', '"alias":')
	alias_data = alias_data.replace('members:', '"members":')
	alias_data = alias_data.replace('success:', '"success":')
	alias_data = alias_data.replace('total:', '"total":')
	alias_data = alias_data.replace("'", '"')
	alias_data = alias_data.replace(codecs.BOM_UTF8, '')
	page.close()

	content = "{\n\"alias\": " +  alias_data + ",\n \"ext\":" + ext_data + "\n}\n"
	with open(CONTACT_LIST, "w") as fp:
		fp.write(content);
	curl.close()

def loadContact():
	with open(CONTACT_LIST, "r") as fp:
		contact = json.load(fp)
	return contact

def show_ext_record(record):
	print bcolors.YELLOW + record['ext'] + bcolors.ENDC,
	print bcolors.GREEN + record['nameTw'].encode('utf-8') + bcolors.ENDC,
	print bcolors.BLUE + record['account'] + bcolors.ENDC,
	print "(" + record['department'] + ")"

def findPerson(keyword):
	exts = loadContact()['ext']['data']

	def findmatch(line, keyword):
		if (-1 != line.upper().find(keyword.decode('utf-8').upper())):
			return True
		return False

	for record in exts:
		if (findmatch(record['account'], keyword) or
			findmatch(record['nameTw'], keyword) or
			findmatch(record['nameEn'], keyword) or
			findmatch(record['department'], keyword) or
			findmatch(record['title'], keyword) or
			keyword.decode('utf-8') == record['ext'].decode('utf-8')) :
			show_ext_record(record)
	return

def show_alias(alias):
	contact = loadContact()

	def findAliasMember(contact, alias):
		aliasData = contact['alias']['data']
		for record in aliasData:
			if (record['alias'] == alias):
				return string.split(record['members'], ', ')
		return []

	def findPersonFromContact(contact, account):
		exts = contact['ext']['data'];
		for record in exts:
			if (record['account'] == account):
				return record
		return False

	aliasMembers = findAliasMember(contact, alias);

	if 0 == len(aliasMembers):
		print "Not Found Email Alias: ", alias
		return

	print bcolors.GREEN + "Email Alias:", bcolors.ENDC, \
		bcolors.YELLOW + alias + bcolors.ENDC

	aliasGroup = []
	aliasMember = []
	for member in aliasMembers:
		record = findPersonFromContact(contact, member)
		if (False == record):
			aliasGroup.append(member)
		else:
			aliasMember.append(record)

	if (0 != len(aliasGroup)):
		print bcolors.GREEN + "Groups:", bcolors.ENDC, string.join(aliasGroup, ', ')

	if (0 != len(aliasMember)):
		print "=" * 10, bcolors.GREEN, "Members", bcolors.ENDC, "=" * 10
		for record in aliasMember:
			show_ext_record(record)
	return

def list_alias():
	alias_data = loadContact()['alias']['data']
	for alias in alias_data:
		print alias['alias']

def check_contact_list():
	if not os.path.isfile(CONTACT_LIST):
		print """Not found contact list.
Pealse use "tel -u" to update contact list first.
"""
		sys.exit(1);
	return


def main():
	try:
		opts,args = getopt.getopt(sys.argv[1:], "auh", ["alias", "update", "help"]);
		if 0 == len(opts):
			if 1 == len(args):
				check_contact_list()
				findPerson(args[0])
			else :
				usage()
		elif opts[0][0] in ("-u", "--update"):
			get_contact_list()
		elif opts[0][0] in ("-a", "--alias"):
			check_contact_list()
			if len(args) > 0:
				show_alias(args[0])
			else:
				list_alias();
		else:
			usage()
		sys.exit(1)
	except getopt.GetoptError:
		usage()
		sys.exit(1)

if "__main__" == __name__:
	main();
