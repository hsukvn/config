#!/usr/bin/python
# encoding: utf-8
import os
import httplib, urllib, json

CONTACT_LIST = os.getenv('HOME') + '/.tmp/.contact'

def get_auth_info():
	import getpass
	from subprocess import check_output

	try:
		username = check_output(["git", "config", "user.name"]).strip()
	except:
		username = getpass.getuser()

	match = False
	if username and os.path.exists(CONTACT_LIST):
		class MatchedException(Exception): pass

		def record_handler(rec):
			if rec.has_key("account") and rec["account"] == username:
				raise MatchedException()

		with open(CONTACT_LIST, "r") as fp:
			try:
				json.load(fp, object_hook = record_handler)
			except MatchedException:
				match = True

	if not username or not match:
		username = raw_input("Please enter your username: ")

	password = getpass.getpass("Please enter your password: ")

	return (username, password)

def synois_login(username, password):
	conn = httplib.HTTPSConnection('synois.synology.com')
	#conn.set_debuglevel(10)

	conn.request('POST', '/index/auth.php', urllib.urlencode({
		'action': 'login',
		'id': username,
		'pw': password,
	}), {
		'Content-Type': 'application/x-www-form-urlencoded',
		#'Connection': 'keep-alive',
	})

	res = conn.getresponse()

	if res.status != httplib.OK:
		conn.close()
		return False

	conn.close()

	#content = res.read()
	cookie = res.getheader("set-cookie").split(";")[0] + ';'

	return cookie

def synois_contact_list(cookie):
	import codecs

	conn = httplib.HTTPSConnection('synois.synology.com')
	#conn.set_debuglevel(10)

	conn.request('POST', '/app/Extension/scripts/list.php', urllib.urlencode({
		'action': 'enum',
	}), {
		'Content-Type': 'application/x-www-form-urlencoded',
		'Cookie': cookie,
	})
	res = conn.getresponse()
	if res.status != httplib.OK:
		conn.close()
		return False

	content = res.read()
	conn.close()

	with open(CONTACT_LIST + ".raw", "w") as fp:
		fp.write(content)

	content = content.replace(codecs.BOM_UTF8, '')

	return json.loads(content)

def get_contact_list(output_fname = CONTACT_LIST):
	username, password = get_auth_info()
	cookie = synois_login(username, password)

	if not cookie:
		return False

	contact = synois_contact_list(cookie)

	if not contact:
		return False

	with open(output_fname, "w") as fp:
		json.dump(contact, fp);

def list_matched_record(pattern):
	def record_handler(rec):
		GREEN = '\033[32m '
		YELLOW = '\033[93m '
		BLUE = '\033[94m '
		ENDC = '\033[0m '

		if not rec.has_key("account"):
			return False

		s = YELLOW + rec["ext"] \
		+ GREEN + rec["nameTw"] \
		+ BLUE + rec["account"] \
		+ ENDC + "(" + rec["department"] + ")";

		if -1 != s.upper().find(pattern.upper()):
			print s.encode("utf-8")

		return True

	with open(CONTACT_LIST, "r") as fp:
		json.load(fp, object_hook = record_handler)


if "__main__" == __name__:
	import sys, argparse
	reload(sys)
	sys.setdefaultencoding('utf8')

	parser = argparse.ArgumentParser(description = "lookup tel from synois")
	a = parser.add_argument
	a('-u', '--update', default = False, action = 'store_true', help = "update list first")
	a('pattern', default = None, help = "filter pattern")

	opt = parser.parse_args(sys.argv[1:])

	if opt.update:
		get_contact_list()

	list_matched_record(opt.pattern)
