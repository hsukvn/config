#!/bin/bash

SYNO_ADD_OPT="ch"
ScriptPath=$(dirname `readlink -f $0`)
. $ScriptPath/syno.common ""

tt_WARN=
srcpath=$(syno_get_basepath "$@")
platform=$(syno_get_platform "$srcpath")
project=$(syno_get_project)

if [ "$platform" = "base" -o -z "$platform" ]; then
	platform=$SYNO_CURR_PLATFORM
fi
srcpath=$(syno_get_basepath -p $platform $srcpath)
srcbasepath=$(syno_get_basepath -p base $srcpath)

show_usage() {
	cat <<EOF
Usage: $(basename $0) [options] [qf]
Options:
	-h                   show this help message
EOF
	syno_get_basepath_usage
}
while getopts "$(syno_get_basepath_opt)ch" opt; do
	case $opt in
		h) show_usage ; exit 0;;
	esac
done
shift $((OPTIND - 1))

echo "srcpath: $srcpath, platform: $platform, proj: $project" >&2

# sanity check
if [ ! -x "$srcbasepath/lnxscripts/BuildAll" ]; then
	echo "$srcbasepath/lnxscripts/BuildAll is not executable" >&2
	exit 2
fi
if [ -z "$platform" -o -z "$project" ]; then
	echo "please change dir to a project" >&2
	exit 3
fi

build() {
	echo -n "run sudo $srcpath/lnxscripts/BuildAll -F -j 30 -USp \"$platform\" \"$project\"" >&2
	if [ ! "${dontask+isset}" ]; then
		read -p "? [N/y] " opt
	fi
	case $opt in
		[yY])
			sudo env SynoBuildOpt="-i " \
				$srcpath/lnxscripts/BuildAll -F -j 30 -USp "$platform" "$project"
			;;
		*)
			exit 0
			;;
	esac
}
show_qf() {
	echo "cf $srcpath/logs/$project.build" >&2
	if [ -r "$srcpath/logs/$project.build" ]; then
		vim "+cf $srcpath/logs/$project.build"
	fi
}

case "$1" in
	qf) shift; show_qf ;;
	*)  build; show_qf ;;
esac
