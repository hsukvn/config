#!/bin/sh

export LANG=C

synosrc='/synosrc'

TimeStamp="build_timestamp"
PackTimeStamp="pack_timestamp"

export SYNO_LNXSYNOBASE_PATH="/home/thlu/synosrc/allplat/ds.base/source/lnxsynobase"
isNeedBaseAll=on
#isRunTest=on

log() {
	local ret=$?
	#echo "daily build --- $@" | tee -a $synosrc/log.daily >&2
	echo "daily build --- $@" >&2
	return $ret
}
make_tags() { # build my tags and cscope files
	local TagPath=${TagPath:-$synosrc}
	local tmpdir=${TMPDIR}
	export TMPDIR=/synosrc/tmp
	log "make tags: $TagPath, tempdir: $TMPDIR"

	if [ ! -d "$TMPDIR" ]; then
		mkdir "$TMPDIR"
	fi

	if [ ! -d "$TagPath" ]; then
		log "tag path: $TagPath is not existed, skip"
		return 1
	fi
	(
		cd "$TagPath" || return 1
		/home/thlu/config/script/syno.build.tags
		/home/thlu/config/script/syno.build.tags -b q1
	) > /synosrc/tag.log 2>&1
	export TMPDIR=$tmpdir
}
clean_trash() { # clean all files in trash
	log "clean all files in trash"
	local i= j=
	for i in ./trash/*; do
		if [ -d $i/proc ]; then
			umount $i/proc
		fi
		if [ -d $i/dev ]; then
			umount $i/dev
		fi
		if printf "%s" $i | grep -q trash; then
			log "clean $i"
			rm -rf "$i"
		fi
	done

	(
	# remove old image
	local count=
	for i in $synosrc/*/ds.*/image/; do
		cd $i || continue
		rm -rf Image_* packages/ tarballs
	done
	)
}
update_lnxscripts() { # <branch>
	local branch=${1?"bad param"}
	local base_dir=ds.base
	local basepath="$synosrc/$branch/$base_dir"
	local git=git
	shift

	if [ "$isRunTest" ]; then
		git="/bin/echo git"
	fi

	log "update: $basepath/lnxscripts first"
	# fixed BuildAll bug, update $synosrc/ds.base/lnxscripts first
	(
		if cd $basepath/lnxscripts; then
			local isNotStashed=
			if $git stash | grep "No local changes to save"; then
				isNotStashed=yes
			fi
			$git pull --rebase
			[ "$isNotStashed" ] || $git stash pop
		fi
	) > $basepath/UpdateLnxscripts.log 2>&1

}
baseall() { # <branch> <baseall options> ...
	local branch=$1
	local base_dir=ds.base
	local basepath="$synosrc/$branch/$base_dir"
	local baseall="$basepath/lnxscripts/BaseAll"

	shift
	if [ "$isRunTest" ]; then
		baseall="/bin/echo BaseAll"
	fi
	if [ ! -x "$baseall" ]; then
		log "$baseall is not executable"
	fi

	log "do $baseall -f $@"
	$baseall -f "$@" > $basepath/BaseAll.log 2>&1
}
build() { # <branch> <build options> ...
	local branch=$1
	local ret=
	local isNotStashed=
	local base_dir=ds.base
	local timestamp="$branch/$TimeStamp"
	local basepath="$synosrc/$branch/$base_dir"
	local buildall="$basepath/lnxscripts/BuildAll"
	local buildflags="-zj6"

	shift
	if [ -z "$branch" ]; then
		log "no branch settings: $@"
		return 1
	fi
	if [ ! -x "$buildall" ]; then
		log "build script for $basepath is not ready"
		return 1
	fi
	if [ "$isRunTest" ]; then
		buildall="/bin/echo BuildAll"
	fi

	[ "$isRunTest" ] || touch "$timestamp"

	log "build: $buildall $buildflags $@"
	$buildall $buildflags "$@" > $basepath/BuildAll.log 2>&1
	ret=$?

	[ "$isRunTest" ] || touch -a "$timestamp"

	return $ret
}
do_pack_image() { # <branch> <platform> <model1 model2 ...>
	local branch="$1"
	local platform="$2"
	local models="$3" model=
	local timestamp="$branch/$PackTimeStamp"
	local basepath="$synosrc/$branch/ds.$platform"

	# chroot scripts
	local synoinstall="/lnxscripts/SynoInstall"
	local synomodel="/lnxscripts/SynoModel"

	# rename old size files
	if [ -f $basepath/logs/project_size ]; then
		mv $basepath/logs/project_size $basepath/logs/project_size.old
	fi

	if [ -z "$branch" -o -z "$platform" -o -z "$models" ]; then
		log "bad parameters"
		return 1
	fi

	if [ "$isRunTest" ]; then
		synoinstall="/bin/echo SynoInstall"
		synomodel="/bin/echo SynoModel"
	fi

	[ "$isRunTest" ] || touch "$timestamp"

	log "packimage: $branch/$platform/$models -- SynoInstall"
	chroot "$basepath" $synoinstall --$platform --all > $basepath/InstallAll.log 2>&1

	log "packimage: $branch/$platform/$models -- SynoModel"
	for model in $models; do
		chroot "$basepath" env TEST_MODEL=$model $synomodel --$platform > $basepath/Model.$model.log 2>&1
	done

	log "packimage: $branch/$platform/$models -- Done"

	[ "$isRunTest" ] || touch -a "$timestamp"
}
pack_image() { # <branch> <platform:model,model platform:model ...>
	local branch="$1"
	local platforms="$2"
	local platform= models=

	if [ -z "$branch" ]; then
		log "no branch settings"
		return 1
	fi
	if [ -z "$platforms" ]; then
		log "no platform settings"
		return 1
	fi

	for v in $platforms; do
		platform="${v%%:*}"
		models="${v##*:}"
		do_pack_image "$branch" "$platform" "$(printf "%s" "$models" | sed 's/,/ /')" &
	done
	wait
}
extract_info() {
	local info_owner='thlu.thlu'
	local info_dir='/home/thlu/public_html/build_info'
	local info_exe='/home/thlu/bin/syno.build.status'

	[ -d "$info_dir" ] || return 0

	$info_exe \
		--output="detail.json" \
		--format=json --ccache --timecost --errlog --uplog  \
		--timestamp="$TimeStamp" \
		--profile="profile.json" \
		--job_type="test" \
		--dir="$info_dir/logs."`date +"%m%d_%H%M"` \
		--owner="$info_owner"
		#--no-realtime ## this is not available now
}

daily_build_plan() {
	/usr/sbin/ntpdate -b pool.ntp.org

	[ "$isRunTest" ] || clean_trash

	local weekday=`date +"%w"`

	update_lnxscripts curr &
	update_lnxscripts allplat &
	update_lnxscripts q1 &
	wait

	baseall curr -S "$synobase_path"

	# "bromolow x64 853x 6281 cedarview qoriq 816x armadaxp armada370 evansport comcerto2k avoton dual kvmx64 bromolowhost"
	if [ $weekday -eq 6 ]; then
		build curr -p "x64 6281 cedarview" &
		build allplat -p "qoriq 853x comcerto2k" &
		wait
		pack_image curr "x64:1511+"
	elif [ $weekday -eq 3 ]; then
		#build q1 -p "x64" &
		build curr -p "cedarview 6281" &
		build allplat -p "816x armada370 evansport" &
		wait
		pack_image curr "x64:1511+"
	else
		#build q1 -p "x64" &
		build curr -p "cedarview 6281" &
		build allplat -p "bromolow armadaxp" &
		wait
		pack_image curr "x64:1511+"
	fi

	#pack_image curr "853x:509+ x64:1010+"
	#pack_image q3 "6281:213air"
	#pack_image curr "qoriq:413 cedarview:1812+"

	[ "$isRunTest" ] || extract_info
	[ "$isRunTest" ] || make_tags

	log "done" `date`
}

usage() {
	cat <<EOF
$0 [action] [args...]
Action:
  daily                                      do daily build
  build <branch> <build options>             build a single branch
    e.g. build curr
  pack <branch> <platform:model,...>         pack pat
    e.g. pack_image curr "x64:1511+"
  tag                                        not ready now...
EOF
}

# main process
cd "$synosrc" || { log "can not chdir to $synosrc"; exit 1; }
log "current dir: `pwd`"

action=$1
shift
case "$action" in
	daily)
		daily_build_plan ;;
	build)
		build "$@" ;;
	pack)
		pack_image "$@" ;;
	h|help|-h|--help)
		usage ;;
	*)
		usage ; exit 1 ;;
esac
